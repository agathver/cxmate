// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cxmate.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	cxmate.proto

It has these top-level messages:
	NetworkElement
	Parameter
	Error
	Node
	Edge
	NodeAttribute
	EdgeAttribute
	NetworkAttribute
	CartesianLayout
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// NetworkElement is a wrapper that constains a networkId, which is used to allow
// StreamNetworks to send and receive more than one network, networks are distinguished by there id.
// NetworkElement is also a wrapper for exactly one element. Some elements do not exist in CX,
// like Parameter and Error, which are special elements used to communicate out of band information
// between cxMate and a service. The other elements corrospond to an aspect in a CX document. These
// elements should be used to build networks, and turn networks back into elements cxMate can understand.
type NetworkElement struct {
	NetworkId int64 `protobuf:"varint,1,opt,name=networkId" json:"networkId,omitempty"`
	// Types that are valid to be assigned to Element:
	//	*NetworkElement_Parameter
	//	*NetworkElement_Error
	//	*NetworkElement_Node
	//	*NetworkElement_Edge
	//	*NetworkElement_NodeAttribute
	//	*NetworkElement_EdgeAttribute
	//	*NetworkElement_NetworkAttribute
	//	*NetworkElement_CartesianLayout
	Element isNetworkElement_Element `protobuf_oneof:"element"`
}

func (m *NetworkElement) Reset()                    { *m = NetworkElement{} }
func (m *NetworkElement) String() string            { return proto1.CompactTextString(m) }
func (*NetworkElement) ProtoMessage()               {}
func (*NetworkElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isNetworkElement_Element interface {
	isNetworkElement_Element()
}

type NetworkElement_Parameter struct {
	Parameter *Parameter `protobuf:"bytes,2,opt,name=parameter,oneof"`
}
type NetworkElement_Error struct {
	Error *Error `protobuf:"bytes,3,opt,name=error,oneof"`
}
type NetworkElement_Node struct {
	Node *Node `protobuf:"bytes,4,opt,name=node,oneof"`
}
type NetworkElement_Edge struct {
	Edge *Edge `protobuf:"bytes,5,opt,name=edge,oneof"`
}
type NetworkElement_NodeAttribute struct {
	NodeAttribute *NodeAttribute `protobuf:"bytes,6,opt,name=nodeAttribute,oneof"`
}
type NetworkElement_EdgeAttribute struct {
	EdgeAttribute *EdgeAttribute `protobuf:"bytes,7,opt,name=edgeAttribute,oneof"`
}
type NetworkElement_NetworkAttribute struct {
	NetworkAttribute *NetworkAttribute `protobuf:"bytes,8,opt,name=networkAttribute,oneof"`
}
type NetworkElement_CartesianLayout struct {
	CartesianLayout *CartesianLayout `protobuf:"bytes,9,opt,name=cartesianLayout,oneof"`
}

func (*NetworkElement_Parameter) isNetworkElement_Element()        {}
func (*NetworkElement_Error) isNetworkElement_Element()            {}
func (*NetworkElement_Node) isNetworkElement_Element()             {}
func (*NetworkElement_Edge) isNetworkElement_Element()             {}
func (*NetworkElement_NodeAttribute) isNetworkElement_Element()    {}
func (*NetworkElement_EdgeAttribute) isNetworkElement_Element()    {}
func (*NetworkElement_NetworkAttribute) isNetworkElement_Element() {}
func (*NetworkElement_CartesianLayout) isNetworkElement_Element()  {}

func (m *NetworkElement) GetElement() isNetworkElement_Element {
	if m != nil {
		return m.Element
	}
	return nil
}

func (m *NetworkElement) GetNetworkId() int64 {
	if m != nil {
		return m.NetworkId
	}
	return 0
}

func (m *NetworkElement) GetParameter() *Parameter {
	if x, ok := m.GetElement().(*NetworkElement_Parameter); ok {
		return x.Parameter
	}
	return nil
}

func (m *NetworkElement) GetError() *Error {
	if x, ok := m.GetElement().(*NetworkElement_Error); ok {
		return x.Error
	}
	return nil
}

func (m *NetworkElement) GetNode() *Node {
	if x, ok := m.GetElement().(*NetworkElement_Node); ok {
		return x.Node
	}
	return nil
}

func (m *NetworkElement) GetEdge() *Edge {
	if x, ok := m.GetElement().(*NetworkElement_Edge); ok {
		return x.Edge
	}
	return nil
}

func (m *NetworkElement) GetNodeAttribute() *NodeAttribute {
	if x, ok := m.GetElement().(*NetworkElement_NodeAttribute); ok {
		return x.NodeAttribute
	}
	return nil
}

func (m *NetworkElement) GetEdgeAttribute() *EdgeAttribute {
	if x, ok := m.GetElement().(*NetworkElement_EdgeAttribute); ok {
		return x.EdgeAttribute
	}
	return nil
}

func (m *NetworkElement) GetNetworkAttribute() *NetworkAttribute {
	if x, ok := m.GetElement().(*NetworkElement_NetworkAttribute); ok {
		return x.NetworkAttribute
	}
	return nil
}

func (m *NetworkElement) GetCartesianLayout() *CartesianLayout {
	if x, ok := m.GetElement().(*NetworkElement_CartesianLayout); ok {
		return x.CartesianLayout
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NetworkElement) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _NetworkElement_OneofMarshaler, _NetworkElement_OneofUnmarshaler, _NetworkElement_OneofSizer, []interface{}{
		(*NetworkElement_Parameter)(nil),
		(*NetworkElement_Error)(nil),
		(*NetworkElement_Node)(nil),
		(*NetworkElement_Edge)(nil),
		(*NetworkElement_NodeAttribute)(nil),
		(*NetworkElement_EdgeAttribute)(nil),
		(*NetworkElement_NetworkAttribute)(nil),
		(*NetworkElement_CartesianLayout)(nil),
	}
}

func _NetworkElement_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*NetworkElement)
	// element
	switch x := m.Element.(type) {
	case *NetworkElement_Parameter:
		b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Parameter); err != nil {
			return err
		}
	case *NetworkElement_Error:
		b.EncodeVarint(3<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *NetworkElement_Node:
		b.EncodeVarint(4<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Node); err != nil {
			return err
		}
	case *NetworkElement_Edge:
		b.EncodeVarint(5<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Edge); err != nil {
			return err
		}
	case *NetworkElement_NodeAttribute:
		b.EncodeVarint(6<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.NodeAttribute); err != nil {
			return err
		}
	case *NetworkElement_EdgeAttribute:
		b.EncodeVarint(7<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.EdgeAttribute); err != nil {
			return err
		}
	case *NetworkElement_NetworkAttribute:
		b.EncodeVarint(8<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.NetworkAttribute); err != nil {
			return err
		}
	case *NetworkElement_CartesianLayout:
		b.EncodeVarint(9<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CartesianLayout); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NetworkElement.Element has unexpected type %T", x)
	}
	return nil
}

func _NetworkElement_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*NetworkElement)
	switch tag {
	case 2: // element.parameter
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Parameter)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_Parameter{msg}
		return true, err
	case 3: // element.error
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_Error{msg}
		return true, err
	case 4: // element.node
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Node)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_Node{msg}
		return true, err
	case 5: // element.edge
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Edge)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_Edge{msg}
		return true, err
	case 6: // element.nodeAttribute
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(NodeAttribute)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_NodeAttribute{msg}
		return true, err
	case 7: // element.edgeAttribute
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(EdgeAttribute)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_EdgeAttribute{msg}
		return true, err
	case 8: // element.networkAttribute
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(NetworkAttribute)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_NetworkAttribute{msg}
		return true, err
	case 9: // element.cartesianLayout
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CartesianLayout)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_CartesianLayout{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NetworkElement_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*NetworkElement)
	// element
	switch x := m.Element.(type) {
	case *NetworkElement_Parameter:
		s := proto1.Size(x.Parameter)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_Error:
		s := proto1.Size(x.Error)
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_Node:
		s := proto1.Size(x.Node)
		n += proto1.SizeVarint(4<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_Edge:
		s := proto1.Size(x.Edge)
		n += proto1.SizeVarint(5<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_NodeAttribute:
		s := proto1.Size(x.NodeAttribute)
		n += proto1.SizeVarint(6<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_EdgeAttribute:
		s := proto1.Size(x.EdgeAttribute)
		n += proto1.SizeVarint(7<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_NetworkAttribute:
		s := proto1.Size(x.NetworkAttribute)
		n += proto1.SizeVarint(8<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_CartesianLayout:
		s := proto1.Size(x.CartesianLayout)
		n += proto1.SizeVarint(9<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Parameter represents a named value passed from cxMate to the service.
// A service should never send a Parameter to cxMate, it will be discarded.
// Parameters are usually used to pass query string parameters (?key=value pairs in a URL)
// to a service for small tweaks to the way a service runs.
type Parameter struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (m *Parameter) String() string            { return proto1.CompactTextString(m) }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Parameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Parameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Error represents an error from either cxMate or the service. Errors sent
// from the service to cxMate will be encoded in the final JSON response returned to
// the REST client. Sending back good error messages is good practice.
type Error struct {
	Status  int64  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Link    string `protobuf:"bytes,4,opt,name=link" json:"link,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto1.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Error) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Error) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

// Node represents a single node in a network.
type Node struct {
	Id         int64  `protobuf:"varint,1,opt,name=id,json=@id" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,json=n" json:"name,omitempty"`
	Represents string `protobuf:"bytes,3,opt,name=represents,json=r" json:"represents,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto1.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Node) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetRepresents() string {
	if m != nil {
		return m.Represents
	}
	return ""
}

// Edge represents a single edge in a network.
type Edge struct {
	Id          int64  `protobuf:"varint,1,opt,name=id,json=@id" json:"id,omitempty"`
	SourceId    int64  `protobuf:"varint,2,opt,name=sourceId,json=s" json:"sourceId,omitempty"`
	TargetId    int64  `protobuf:"varint,3,opt,name=targetId,json=t" json:"targetId,omitempty"`
	Interaction string `protobuf:"bytes,4,opt,name=interaction,json=i" json:"interaction,omitempty"`
}

func (m *Edge) Reset()                    { *m = Edge{} }
func (m *Edge) String() string            { return proto1.CompactTextString(m) }
func (*Edge) ProtoMessage()               {}
func (*Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Edge) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Edge) GetSourceId() int64 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *Edge) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Edge) GetInteraction() string {
	if m != nil {
		return m.Interaction
	}
	return ""
}

// NodeAttribute represents a single attribute attached to a node.
type NodeAttribute struct {
	NodeId int64  `protobuf:"varint,1,opt,name=nodeId,json=po" json:"nodeId,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,json=n" json:"name,omitempty"`
	//  google.protobuf.Any value = 3 [ json_name = "v" ];
	Value string `protobuf:"bytes,3,opt,name=value,json=v" json:"value,omitempty"`
	Type  string `protobuf:"bytes,4,opt,name=type,json=d" json:"type,omitempty"`
}

func (m *NodeAttribute) Reset()                    { *m = NodeAttribute{} }
func (m *NodeAttribute) String() string            { return proto1.CompactTextString(m) }
func (*NodeAttribute) ProtoMessage()               {}
func (*NodeAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NodeAttribute) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *NodeAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NodeAttribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// EdgeAttribute represents a single attribute attached to an edge.
type EdgeAttribute struct {
	EdgeId int64  `protobuf:"varint,1,opt,name=edgeId,json=po" json:"edgeId,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,json=n" json:"name,omitempty"`
	//  google.protobuf.Any value = 3 [ json_name = "v" ];
	Value string `protobuf:"bytes,3,opt,name=value,json=v" json:"value,omitempty"`
	Type  string `protobuf:"bytes,4,opt,name=type,json=d" json:"type,omitempty"`
}

func (m *EdgeAttribute) Reset()                    { *m = EdgeAttribute{} }
func (m *EdgeAttribute) String() string            { return proto1.CompactTextString(m) }
func (*EdgeAttribute) ProtoMessage()               {}
func (*EdgeAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EdgeAttribute) GetEdgeId() int64 {
	if m != nil {
		return m.EdgeId
	}
	return 0
}

func (m *EdgeAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EdgeAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *EdgeAttribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// NetworkAttribute represents a single attribute attached to a network.
type NetworkAttribute struct {
	Name string `protobuf:"bytes,2,opt,name=name,json=n" json:"name,omitempty"`
	//  google.protobuf.Any value = 3 [ json_name = "v" ];
	Value string `protobuf:"bytes,3,opt,name=value,json=v" json:"value,omitempty"`
	Type  string `protobuf:"bytes,4,opt,name=type,json=d" json:"type,omitempty"`
}

func (m *NetworkAttribute) Reset()                    { *m = NetworkAttribute{} }
func (m *NetworkAttribute) String() string            { return proto1.CompactTextString(m) }
func (*NetworkAttribute) ProtoMessage()               {}
func (*NetworkAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NetworkAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NetworkAttribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// CartesianLayout represents an (x,y,(z)) coordinate attached to a node.
type CartesianLayout struct {
	NodeId int64   `protobuf:"varint,1,opt,name=nodeId,json=node" json:"nodeId,omitempty"`
	X      float64 `protobuf:"fixed64,2,opt,name=x" json:"x,omitempty"`
	Y      float64 `protobuf:"fixed64,3,opt,name=y" json:"y,omitempty"`
	Z      float64 `protobuf:"fixed64,4,opt,name=z" json:"z,omitempty"`
}

func (m *CartesianLayout) Reset()                    { *m = CartesianLayout{} }
func (m *CartesianLayout) String() string            { return proto1.CompactTextString(m) }
func (*CartesianLayout) ProtoMessage()               {}
func (*CartesianLayout) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CartesianLayout) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *CartesianLayout) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *CartesianLayout) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *CartesianLayout) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

func init() {
	proto1.RegisterType((*NetworkElement)(nil), "proto.NetworkElement")
	proto1.RegisterType((*Parameter)(nil), "proto.Parameter")
	proto1.RegisterType((*Error)(nil), "proto.Error")
	proto1.RegisterType((*Node)(nil), "proto.Node")
	proto1.RegisterType((*Edge)(nil), "proto.Edge")
	proto1.RegisterType((*NodeAttribute)(nil), "proto.NodeAttribute")
	proto1.RegisterType((*EdgeAttribute)(nil), "proto.EdgeAttribute")
	proto1.RegisterType((*NetworkAttribute)(nil), "proto.NetworkAttribute")
	proto1.RegisterType((*CartesianLayout)(nil), "proto.CartesianLayout")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CxMateService service

type CxMateServiceClient interface {
	// StreamElements allows cxMate to stream one or more networks to a service
	// which can then stream one or more networks back.
	StreamNetworks(ctx context.Context, opts ...grpc.CallOption) (CxMateService_StreamNetworksClient, error)
}

type cxMateServiceClient struct {
	cc *grpc.ClientConn
}

func NewCxMateServiceClient(cc *grpc.ClientConn) CxMateServiceClient {
	return &cxMateServiceClient{cc}
}

func (c *cxMateServiceClient) StreamNetworks(ctx context.Context, opts ...grpc.CallOption) (CxMateService_StreamNetworksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CxMateService_serviceDesc.Streams[0], c.cc, "/proto.cxMateService/StreamNetworks", opts...)
	if err != nil {
		return nil, err
	}
	x := &cxMateServiceStreamNetworksClient{stream}
	return x, nil
}

type CxMateService_StreamNetworksClient interface {
	Send(*NetworkElement) error
	Recv() (*NetworkElement, error)
	grpc.ClientStream
}

type cxMateServiceStreamNetworksClient struct {
	grpc.ClientStream
}

func (x *cxMateServiceStreamNetworksClient) Send(m *NetworkElement) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cxMateServiceStreamNetworksClient) Recv() (*NetworkElement, error) {
	m := new(NetworkElement)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CxMateService service

type CxMateServiceServer interface {
	// StreamElements allows cxMate to stream one or more networks to a service
	// which can then stream one or more networks back.
	StreamNetworks(CxMateService_StreamNetworksServer) error
}

func RegisterCxMateServiceServer(s *grpc.Server, srv CxMateServiceServer) {
	s.RegisterService(&_CxMateService_serviceDesc, srv)
}

func _CxMateService_StreamNetworks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CxMateServiceServer).StreamNetworks(&cxMateServiceStreamNetworksServer{stream})
}

type CxMateService_StreamNetworksServer interface {
	Send(*NetworkElement) error
	Recv() (*NetworkElement, error)
	grpc.ServerStream
}

type cxMateServiceStreamNetworksServer struct {
	grpc.ServerStream
}

func (x *cxMateServiceStreamNetworksServer) Send(m *NetworkElement) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cxMateServiceStreamNetworksServer) Recv() (*NetworkElement, error) {
	m := new(NetworkElement)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CxMateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.cxMateService",
	HandlerType: (*CxMateServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNetworks",
			Handler:       _CxMateService_StreamNetworks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cxmate.proto",
}

func init() { proto1.RegisterFile("cxmate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xdf, 0x8f, 0xd2, 0x40,
	0x10, 0xc7, 0xbb, 0x94, 0x1f, 0xd7, 0x01, 0x0e, 0xb2, 0x72, 0xd8, 0x18, 0x1f, 0xce, 0xc6, 0x07,
	0x9e, 0x2e, 0x97, 0x33, 0xbe, 0x99, 0xa8, 0xa7, 0x98, 0x92, 0xe8, 0x45, 0xf7, 0x62, 0x8c, 0x8f,
	0x7b, 0xed, 0x84, 0x34, 0x47, 0x5b, 0xb2, 0x5d, 0x10, 0xee, 0x8f, 0xf5, 0x6f, 0x31, 0x3b, 0xdd,
	0xc2, 0x15, 0x7c, 0xd2, 0x27, 0x76, 0x66, 0xbe, 0xf3, 0x61, 0xd8, 0xef, 0x2c, 0xd0, 0x8b, 0x36,
	0xa9, 0xd4, 0x78, 0xb1, 0x54, 0xb9, 0xce, 0x79, 0x8b, 0x3e, 0x82, 0xdf, 0x2e, 0x9c, 0xde, 0xa0,
	0xfe, 0x95, 0xab, 0xfb, 0xe9, 0x02, 0x53, 0xcc, 0x34, 0x7f, 0x0e, 0x5e, 0x56, 0x66, 0x66, 0xb1,
	0xcf, 0xce, 0xd9, 0xc4, 0x15, 0xfb, 0x04, 0xbf, 0x04, 0x6f, 0x29, 0x95, 0x4c, 0x51, 0xa3, 0xf2,
	0x1b, 0xe7, 0x6c, 0xd2, 0xbd, 0x1a, 0x96, 0xc8, 0x8b, 0xaf, 0x55, 0x3e, 0x74, 0xc4, 0x5e, 0xc4,
	0x5f, 0x42, 0x0b, 0x95, 0xca, 0x95, 0xef, 0x92, 0xba, 0x67, 0xd5, 0x53, 0x93, 0x0b, 0x1d, 0x51,
	0x16, 0xf9, 0x0b, 0x68, 0x66, 0x79, 0x8c, 0x7e, 0x93, 0x44, 0x5d, 0x2b, 0xba, 0xc9, 0x63, 0x0c,
	0x1d, 0x41, 0x25, 0x23, 0xc1, 0x78, 0x8e, 0x7e, 0xab, 0x26, 0x99, 0xc6, 0x73, 0x92, 0x98, 0x12,
	0x7f, 0x03, 0x7d, 0x23, 0x7d, 0xaf, 0xb5, 0x4a, 0xee, 0x56, 0x1a, 0xfd, 0x36, 0x69, 0x47, 0x8f,
	0x70, 0xbb, 0x5a, 0xe8, 0x88, 0xba, 0xd8, 0x74, 0x1b, 0xca, 0xbe, 0xbb, 0x53, 0xeb, 0x9e, 0x3e,
	0xae, 0x99, 0xee, 0x9a, 0x98, 0x4f, 0x61, 0x68, 0xaf, 0x69, 0x0f, 0x38, 0x21, 0xc0, 0xd3, 0xea,
	0xeb, 0x0f, 0xca, 0xa1, 0x23, 0x8e, 0x5a, 0xf8, 0x35, 0x0c, 0x22, 0xa9, 0x34, 0x16, 0x89, 0xcc,
	0x3e, 0xcb, 0x6d, 0xbe, 0xd2, 0xbe, 0x47, 0x94, 0xb1, 0xa5, 0x7c, 0xa8, 0x57, 0x43, 0x47, 0x1c,
	0x36, 0x5c, 0x7b, 0xd0, 0xc1, 0xd2, 0xcd, 0xe0, 0x35, 0x78, 0x3b, 0x5f, 0x38, 0x87, 0x66, 0x26,
	0x53, 0x24, 0x57, 0x3d, 0x41, 0x67, 0x3e, 0x82, 0xd6, 0x5a, 0x2e, 0x56, 0x48, 0x66, 0x7a, 0xa2,
	0x0c, 0x02, 0x09, 0x2d, 0x32, 0x88, 0x8f, 0xa1, 0x5d, 0x68, 0xa9, 0x57, 0x85, 0x5d, 0x05, 0x1b,
	0x19, 0x54, 0x64, 0xfc, 0x2a, 0xbb, 0xe8, 0xcc, 0x7d, 0xe8, 0xa4, 0x58, 0x14, 0x72, 0x8e, 0xe4,
	0xb5, 0x27, 0xaa, 0xd0, 0xa8, 0x17, 0x49, 0x76, 0x4f, 0xee, 0x7a, 0x82, 0xce, 0xc1, 0x5b, 0x68,
	0x1a, 0x3f, 0xf8, 0x00, 0x1a, 0x49, 0xb5, 0x68, 0xee, 0xbb, 0x24, 0xe6, 0x03, 0x3b, 0x65, 0x89,
	0x66, 0x19, 0x3f, 0x03, 0x50, 0xb8, 0x54, 0x58, 0x60, 0xa6, 0x0b, 0x8b, 0x66, 0x2a, 0xf8, 0x09,
	0x4d, 0x63, 0xc9, 0x31, 0xe0, 0x09, 0x9c, 0x14, 0xf9, 0x4a, 0x45, 0x38, 0x8b, 0x09, 0xe2, 0x0a,
	0x56, 0x98, 0xa4, 0x96, 0x6a, 0x8e, 0x7a, 0x16, 0x13, 0xc2, 0x15, 0x4c, 0xf3, 0x31, 0x74, 0x93,
	0x4c, 0xa3, 0x92, 0x91, 0x4e, 0xf2, 0xcc, 0x8e, 0xc7, 0x92, 0xe0, 0x07, 0xf4, 0x6b, 0xbb, 0xc2,
	0x39, 0xb4, 0xcd, 0xae, 0xec, 0x5e, 0x44, 0x63, 0x99, 0x1f, 0xcf, 0x39, 0xac, 0xae, 0xd2, 0x8e,
	0xb8, 0x36, 0x12, 0xbd, 0x5d, 0x62, 0x05, 0x8e, 0x0d, 0xb8, 0xb6, 0x46, 0x06, 0x6c, 0xd6, 0xe8,
	0xbf, 0xc1, 0x9f, 0x60, 0x78, 0xb8, 0x5e, 0xff, 0xc4, 0xf9, 0x06, 0x83, 0x83, 0x05, 0xe3, 0xa3,
	0x83, 0xdf, 0x5e, 0xbe, 0xc6, 0x1e, 0xb0, 0x0d, 0x91, 0x99, 0x60, 0x1b, 0x13, 0x6d, 0x89, 0xca,
	0x04, 0xdb, 0x9a, 0xe8, 0x81, 0x90, 0x4c, 0xb0, 0x87, 0xab, 0xef, 0xd0, 0x8f, 0x36, 0x5f, 0xa4,
	0xc6, 0x5b, 0x54, 0xeb, 0x24, 0x42, 0xfe, 0x11, 0x4e, 0x6f, 0xb5, 0x42, 0x99, 0xda, 0x89, 0x0b,
	0x7e, 0x56, 0x7f, 0x21, 0xf6, 0xaf, 0xe8, 0xd9, 0xdf, 0xd3, 0x81, 0x33, 0x61, 0x97, 0xec, 0xae,
	0x4d, 0xb5, 0x57, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x78, 0x9e, 0x93, 0xf9, 0xd8, 0x04, 0x00,
	0x00,
}
